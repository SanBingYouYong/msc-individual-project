import sys
import os
sys.path.append(os.getcwd())

from agents import direct_planner
from agents.decomposer import DecomposerOutput
from pipelines.common.prep_scene import ScenePrepOutput
from pipelines.common.create_and_render import CreateAndRenderInput, CreateAndRenderOutput, create_and_render
from pipelines.common.utils import save_pydantic_model_as_pkl

from pydantic import BaseModel, Field
from typing import List, Optional
from pathlib import Path
from colorama import Fore
import json
from yaspin import yaspin

class DirectInitInput(BaseModel):
    user_request: str = Field(..., description="User request for the 3D scene synthesis")
    decomposer_output: DecomposerOutput = Field(..., description="Output from the decomposer containing asset list and descriptions")
    scene_prep_output: ScenePrepOutput = Field(..., description="Output from the scene preparation pipeline containing generated model files")
    job_folder: Path = Field(..., description="Path to the job folder where the scene will be processed; expected: job-folder/direct_init")
    provider: str = Field("google", description="LLM provider to use for the query")
    model: str = Field("gemini-2.5-flash-lite", description="LLM model to use for the query")
    temperature: float = Field(0, description="Temperature for the LLM response generation")

class DirectInitOutput(BaseModel):
    planner_output: direct_planner.DirectPlannerOutput = Field(..., description="Output from the direct planner containing the scene layout JSON")
    scene_output: CreateAndRenderOutput = Field(..., description="Output from the scene creation and rendering process")

def direct_init(input_data: DirectInitInput) -> DirectInitOutput:
    """Initializes a 3D scene by directly planning the layout in JSON format and creating/rendering the scene."""
    # Ensure the job folder exists
    input_data.job_folder.mkdir(parents=True, exist_ok=True)
    
    # Create a subfolder for pipeline input outputs
    stage_folder = input_data.job_folder / "stage"
    stage_folder.mkdir(parents=True, exist_ok=True)
    staged_files: List[Path] = []

    with yaspin(text="Direct Init: Planning scene layout...", color="green", timer=True) as spinner:
        planner_input = direct_planner.DirectPlannerInput(
            user_request=input_data.user_request,
            assets_str=input_data.decomposer_output.formatted_asset_str,
            provider=input_data.provider,
            model=input_data.model,
            temperature=input_data.temperature
        )
        planner_output = direct_planner.plan(planner_input)
        staged_files.append(save_pydantic_model_as_pkl(planner_output, stage_folder / "planner_output.pkl"))
        spinner.ok("✔")
    
    # Save the layout JSON to a file
    layout_path = input_data.job_folder / "layout.json"
    with open(layout_path, "w") as f:
        # Parse the JSON string to ensure it's valid and reformat it
        try:
            layout_data = json.loads(planner_output.scene_layout)
            json.dump(layout_data, f, indent=4)
        except json.JSONDecodeError as e:
            # If JSON parsing fails, save the raw string and raise an error
            f.write(planner_output.scene_layout)
            raise ValueError(f"Invalid JSON layout generated by planner: {e}")
    
    print(f"{Fore.GREEN}Layout JSON saved to {layout_path}{Fore.RESET}")

    with yaspin(text="Direct Init: Creating and rendering scene according to layout...", color="green", timer=True) as spinner:
        create_and_render_input = CreateAndRenderInput(
            layout_path=layout_path,
            scene_prep_output=input_data.scene_prep_output,
            output_blend_path=input_data.job_folder / "scene.blend",
            render_folder=input_data.job_folder / "renders",
            image_prefix="direct_render"
        )
        create_and_render_output = create_and_render(create_and_render_input)
        staged_files.append(save_pydantic_model_as_pkl(create_and_render_output, stage_folder / "create_and_render_output.pkl"))
        spinner.ok("✔")
    
    direct_init_output = DirectInitOutput(
        planner_output=planner_output,
        scene_output=create_and_render_output
    )

    # Save the final output and clean up staged files
    final_output_path = input_data.job_folder / "direct_init_output.pkl"
    save_pydantic_model_as_pkl(direct_init_output, final_output_path)
    
    # Remove staged pkls
    for staged_file in staged_files:
        if staged_file.exists():
            staged_file.unlink()
    
    try:
        stage_folder.rmdir()
    except OSError:
        print(f"Warning: Could not remove stage folder {stage_folder}. It may not be empty.")

    return direct_init_output

if __name__ == '__main__':
    # Example usage
    from test_data.examples import example_scene_desc, example_decomposer_output, example_sceneprep_output
    input_data = DirectInitInput(
        user_request=example_scene_desc,
        decomposer_output=example_decomposer_output,
        scene_prep_output=example_sceneprep_output,
        job_folder=Path("exp") / "test_direct_init2",
        provider="google",
        model="gemini-2.5-flash-lite",
    )
    output = direct_init(input_data)
    print(f"Direct initialization completed successfully!")
    print(f"Scene created and rendered. Blend file: {output.scene_output.create_scene_output.blend_file_path}")
    print(f"Rendered images: {output.scene_output.render_scene_output.rendered_images}")
